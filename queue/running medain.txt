class Result {

    /*
     * Complete the 'runningMedian' function below.
     *
     * The function is expected to return a DOUBLE_ARRAY.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static List<Double> runningMedian(List<Integer> a) {
 
        List<Double> ans= new ArrayList<>();
        
        PriorityQueue<Double> q1= new PriorityQueue<>(Collections.reverseOrder());
        PriorityQueue<Double> q2= new PriorityQueue<>();
        
        for(int i=0; i<a.size(); i++){
            double num= a.get(i);
            
            if(q1.size()==0 || q1.peek()>num){
                q1.add(num);
            }else{
                q2.add(num);
            }
            
            if(q1.size()>q2.size()+1){
                double val = q1.remove();
                q2.add(val);
            }else if(q2.size()>q1.size()+1){
                double val = q2.remove();
                q1.add(val);
            }
            
            if(q1.size()==q2.size()){
                double num1 = q1.peek();
                double num2 = q2.peek();
                
                ans.add((num1+num2)/2);
            }else{
                if(q1.size()>q2.size()){
                    ans.add(q1.peek());
                }else{
                    ans.add(q2.peek());
                }
            }
        }
        return ans;
    }

}