import java.util.*;

public class Solution {
    
    public static void main(String[] args) {
      
        
        Scanner sc = new Scanner(System.in);
        
        String nq[] = sc.nextLine().split(" ");
        int n = Integer.parseInt(nq[0]);
        int q = Integer.parseInt(nq[1]);
        String nums[] = sc.nextLine().split(" ");
        int pnum = 2;
        int primes[] = new int[q];
        MyStack first = new MyStack();
        MyStack rest = new MyStack();
        MyStack dpst = new MyStack();
        for(int i = 0; i < nums.length; ++i){
            first.push(Integer.parseInt(nums[i]));
        }
        for(int i = 0; i < q; ++i){
            if(first.head == null) break;
            primes[i] = pnum;
            while(first.head != null){
                int number = first.pop();
                if(number%pnum == 0)
                    dpst.push(number);
                else
                    rest.push(number);
            }
            while(dpst.head != null){
                System.out.println(dpst.pop());
            }
            pnum = nextPrimeNumber(pnum, i, primes);
            MyStack temp = rest;
            rest = first;
            first = temp;
        }
        while(first.head != null){
            System.out.println(first.pop());
        }
    }
    static int nextPrimeNumber(int num,int idx,int[] primes){
        if(num == 2) return 3;
        while(true){
            num = num + 2;
            boolean isPrime = true;
            for(int i = 0; i <= idx; ++i){
                if(num%primes[i] == 0){
                    isPrime = false;
                    break;
                }
            }
            if(isPrime) break;
        }
        return num;
    }
}

class MyStack{
    Node head;
    MyStack(){
        head = null;
    }
    void push(int data){
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
    }
    
    int pop(){
        int data = head.data;
        head = head.next;
        return data;
    }
}
class Node{
    int data;
    Node next;
    Node(int d){
        data = d;
        next = null;
    }
}